import request from 'supertest';
import createApp from '../src/app';

// Mock database and Redis health checks for health endpoint tests
jest.mock('../src/config/database', () => ({
  isDatabaseHealthy: jest.fn().mockResolvedValue(true),
  initializeDatabase: jest.fn().mockResolvedValue(undefined),
  closeDatabase: jest.fn().mockResolvedValue(undefined),
  getDatabaseHealth: jest.fn().mockResolvedValue({
    isHealthy: true,
    responseTime: 25,
    poolStats: {
      isConnected: true,
      totalConnections: 5,
      idleConnections: 3,
      runningConnections: 2,
      poolConfig: {
        min: 2,
        max: 10,
        connectionTimeoutMillis: 30000,
        idleTimeoutMillis: 600000,
      },
    },
  }),
  getConnectionPoolStats: jest.fn().mockResolvedValue({
    isConnected: true,
    totalConnections: 5,
    idleConnections: 3,
    runningConnections: 2,
    poolConfig: {
      min: 2,
      max: 10,
      connectionTimeoutMillis: 30000,
      idleTimeoutMillis: 600000,
    },
  }),
}));

jest.mock('../src/config/redis', () => ({
  isRedisHealthy: jest.fn().mockResolvedValue(true),
  getRedisHealth: jest.fn().mockResolvedValue({
    isHealthy: true,
    responseTime: 15,
    metrics: {
      isConnected: true,
      memoryUsage: {
        used: 1048576,
        peak: 2097152,
        rss: 1572864,
        overhead: 524288,
      },
      performance: {
        connectedClients: 2,
        commandsProcessed: 1000,
        keyspaceHits: 800,
        keyspaceMisses: 200,
        hitRatio: 80,
      },
      config: {
        maxmemory: 67108864,
        maxmemoryPolicy: 'allkeys-lru',
      },
    },
  }),
  getRedisMetrics: jest.fn().mockResolvedValue({
    isConnected: true,
    memoryUsage: {
      used: 1048576,
      peak: 2097152,
      rss: 1572864,
      overhead: 524288,
    },
    performance: {
      connectedClients: 2,
      commandsProcessed: 1000,
      keyspaceHits: 800,
      keyspaceMisses: 200,
      hitRatio: 80,
    },
    config: {
      maxmemory: 67108864,
      maxmemoryPolicy: 'allkeys-lru',
    },
  }),
}));

describe('Health Endpoint', () => {
  let app;

  beforeAll(() => {
    app = createApp();
  });

  describe('GET /health', () => {
    it('should return 200 status code', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.status).toBe(200);
    });

    it('should return correct health response format', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.body).toHaveProperty('status');
      expect(response.body).toHaveProperty('timestamp');
      expect(response.body).toHaveProperty('version');
      expect(response.body).toHaveProperty('environment');
      expect(response.body).toHaveProperty('uptime');
      expect(response.body).toHaveProperty('database');
      expect(response.body).toHaveProperty('redis');
      expect(response.body.database).toHaveProperty('status');
      expect(response.body.database).toHaveProperty('responseTime');
      expect(response.body.redis).toHaveProperty('status');
      expect(response.body.redis).toHaveProperty('responseTime');
    });

    it('should return healthy status', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.body.status).toBe('healthy');
    });

    it('should return connected database status', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.body.database.status).toBe('connected');
    });

    it('should return valid timestamp in ISO format', async () => {
      const response = await request(app).get('/health').expect(200);

      const timestamp = response.body.timestamp;
      expect(timestamp).toMatch(/^\d{4}-\d{2}-\d{2}T\d{2}:\d{2}:\d{2}\.\d{3}Z$/);

      // Verify it's a recent timestamp (within last 5 seconds)
      const timestampDate = new Date(timestamp);
      const now = new Date();
      expect(now.getTime() - timestampDate.getTime()).toBeLessThan(5000);
    });

    it('should return version from package.json', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.body.version).toBe('1.0.0');
    });

    it('should return test environment', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.body.environment).toBe('test');
    });

    it('should return numeric uptime', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(typeof response.body.uptime).toBe('number');
      expect(response.body.uptime).toBeGreaterThanOrEqual(0);
    });

    it('should include request ID in response headers', async () => {
      const response = await request(app).get('/health').expect(200);

      expect(response.headers).toHaveProperty('x-request-id');
      expect(response.headers['x-request-id']).toMatch(/^[0-9a-f-]{36}$/i);
    });

    it('should accept custom request ID from header', async () => {
      const customRequestId = 'test-request-id-123';

      const response = await request(app)
        .get('/health')
        .set('X-Request-ID', customRequestId)
        .expect(200);

      expect(response.headers['x-request-id']).toBe(customRequestId);
    });
  });
});
