import { expect, test } from '@playwright/test';

test.describe('Equipment Analytics Dashboard', () => {
  test.beforeEach(async ({ page }) => {
    // Mock authentication
    await page.addInitScript(() => {
      localStorage.setItem('authToken', 'test-token');
      localStorage.setItem(
        'user',
        JSON.stringify({
          id: 'test-user',
          username: 'testuser',
          email: 'test@example.com',
          roles: ['admin', 'analytics_viewer'],
        })
      );
    });

    // Navigate to dashboard
    await page.goto('/analytics/dashboard');
  });

  test('should display overview cards with metrics', async ({ page }) => {
    // Wait for dashboard to load
    await page.waitForSelector('[data-testid="overview-card"]');

    // Check for all metric cards
    await expect(page.locator('text=Total Equipment')).toBeVisible();
    await expect(page.locator('text=Total PLCs')).toBeVisible();
    await expect(page.locator('text=Total Sites')).toBeVisible();
    await expect(page.locator('text=Total Cells')).toBeVisible();

    // Check for trend indicator
    const trendElement = page.locator('text=/\\d+\\.\\d+% this week/');
    await expect(trendElement).toBeVisible();
  });

  test('should display distribution charts', async ({ page }) => {
    // Check for pie charts
    await expect(page.locator('text=Distribution by Site')).toBeVisible();
    await expect(page.locator('text=Distribution by Manufacturer')).toBeVisible();
    await expect(page.locator('text=Distribution by Equipment Type')).toBeVisible();

    // Wait for charts to render
    await page.waitForSelector('.recharts-pie');
    const pieCharts = await page.locator('.recharts-pie').count();
    expect(pieCharts).toBeGreaterThanOrEqual(3);
  });

  test('should display top models bar chart', async ({ page }) => {
    await expect(page.locator('text=Top 10 Equipment Models')).toBeVisible();

    // Wait for bar chart to render
    await page.waitForSelector('.recharts-bar');

    // Check for bars
    const bars = await page.locator('.recharts-bar-rectangle').count();
    expect(bars).toBeGreaterThan(0);
  });

  test('should display recent activity list', async ({ page }) => {
    await expect(page.locator('text=Recent Activity')).toBeVisible();

    // Wait for activity items
    await page.waitForSelector('[data-testid="activity-item"]', {
      timeout: 10000,
    });

    const activities = await page.locator('[data-testid="activity-item"]').count();
    expect(activities).toBeGreaterThan(0);
  });

  test('should handle refresh button click', async ({ page }) => {
    // Click refresh button
    const refreshButton = page.locator('[aria-label="Refresh Dashboard"]');
    await expect(refreshButton).toBeVisible();

    // Intercept API calls
    const overviewPromise = page.waitForResponse('**/api/v1/analytics/overview');

    await refreshButton.click();

    // Wait for API call to complete
    const response = await overviewPromise;
    expect(response.status()).toBe(200);
  });

  test('should handle chart drill-down interactions', async ({ page }) => {
    // Wait for pie chart
    await page.waitForSelector('.recharts-pie-sector');

    // Click on a pie segment
    const pieSegment = page.locator('.recharts-pie-sector').first();
    await pieSegment.click();

    // Verify console log (in real app, this would navigate or filter)
    // For testing, we can check if click handler was triggered
    const consoleMessages: string[] = [];
    page.on('console', msg => consoleMessages.push(msg.text()));

    await pieSegment.click();
    // In production, verify actual navigation or filtering behavior
  });

  test('should export dashboard as PDF', async ({ page }) => {
    // Wait for export button
    const exportButton = page.locator('button:has-text("Export PDF")');
    await expect(exportButton).toBeVisible();

    // Set up download promise before clicking
    const downloadPromise = page.waitForEvent('download');

    // Click export button
    await exportButton.click();

    // Wait for download to start
    const download = await downloadPromise;

    // Verify download filename
    expect(download.suggestedFilename()).toMatch(/equipment-analytics-.*\.pdf/);
  });

  test('should load more activity items', async ({ page }) => {
    // Scroll to activity section
    await page.locator('text=Recent Activity').scrollIntoViewIfNeeded();

    // Check for load more button
    const loadMoreButton = page.locator('button:has-text("Load More")');

    if (await loadMoreButton.isVisible()) {
      // Count initial activities
      const initialCount = await page.locator('[data-testid="activity-item"]').count();

      // Click load more
      await loadMoreButton.click();

      // Wait for new items
      await page.waitForTimeout(1000);

      // Count after loading more
      const newCount = await page.locator('[data-testid="activity-item"]').count();
      expect(newCount).toBeGreaterThan(initialCount);
    }
  });

  test('should display hierarchy treemap', async ({ page }) => {
    await expect(page.locator('text=Site Hierarchy Overview')).toBeVisible();

    // Wait for treemap to render
    await page.waitForSelector('.recharts-treemap', { timeout: 10000 });

    // Check for treemap rectangles
    const treemapRects = await page.locator('.recharts-treemap-rect').count();
    expect(treemapRects).toBeGreaterThan(0);
  });

  test('should show loading skeletons while fetching data', async ({ page }) => {
    // Slow down network to see loading states
    await page.route('**/api/v1/analytics/**', async route => {
      await page.waitForTimeout(2000);
      await route.continue();
    });

    // Reload page
    await page.reload();

    // Check for skeleton loaders
    const skeletons = await page.locator('.MuiSkeleton-root').count();
    expect(skeletons).toBeGreaterThan(0);

    // Wait for data to load
    await page.waitForSelector('[data-testid="overview-card"]', {
      timeout: 10000,
    });
  });

  test('should handle API errors gracefully', async ({ page }) => {
    // Mock API error
    await page.route('**/api/v1/analytics/overview', route => {
      route.fulfill({
        status: 500,
        body: JSON.stringify({ error: 'Internal Server Error' }),
      });
    });

    // Reload page
    await page.reload();

    // Check for error message
    await expect(page.locator('text=Failed to load overview')).toBeVisible({
      timeout: 10000,
    });
  });

  test('should auto-refresh every 5 minutes', async ({ page }) => {
    // Check for auto-refresh indicator
    await expect(page.locator('text=Auto-refreshes every 5 minutes')).toBeVisible();

    // Set up API call monitoring
    let refreshCount = 0;
    page.on('request', request => {
      if (request.url().includes('/api/v1/analytics/overview')) {
        refreshCount++;
      }
    });

    // Initial load
    expect(refreshCount).toBe(1);

    // Fast-forward time (in real test, would wait or mock timers)
    // For demonstration, we can trigger refresh manually
    await page.evaluate(() => {
      const event = new Event('visibilitychange');
      document.dispatchEvent(event);
    });
  });

  test('should filter data by date range', async ({ page }) => {
    // Look for date range filter (if implemented)
    const dateFilter = page.locator('[data-testid="date-range-filter"]');

    if (await dateFilter.isVisible()) {
      await dateFilter.click();

      // Select date range
      await page.locator('text=Last 7 days').click();

      // Verify API call with date params
      const response = await page.waitForResponse(
        response =>
          response.url().includes('/api/v1/analytics') && response.url().includes('dateRange')
      );
      expect(response.status()).toBe(200);
    }
  });

  test('should be responsive on mobile', async ({ page }) => {
    // Set mobile viewport
    await page.setViewportSize({ width: 375, height: 667 });

    // Check that dashboard is still functional
    await expect(page.locator('text=Equipment Analytics Dashboard')).toBeVisible();

    // Check that cards stack vertically
    const cards = await page.locator('[data-testid="overview-card"]').boundingBox();
    expect(cards).toBeTruthy();

    // Charts should be visible
    await expect(page.locator('.recharts-wrapper').first()).toBeVisible();
  });
});
