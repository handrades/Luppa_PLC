import jsPDF from 'jspdf';
import html2canvas from 'html2canvas';
import { AnalyticsExportData } from '../types/analytics';

export async function exportToPDF(element: HTMLElement, data: AnalyticsExportData): Promise<void> {
  try {
    // Create a new PDF document
    const pdf = new jsPDF({
      orientation: 'landscape',
      unit: 'mm',
      format: 'a4',
    });

    // Add title and metadata
    pdf.setFontSize(20);
    pdf.text('Equipment Analytics Dashboard', 15, 20);

    pdf.setFontSize(10);
    pdf.setTextColor(100);

    if (data.metadata) {
      const dateStr = new Date(data.metadata.generatedAt).toLocaleString();
      pdf.text(`Generated: ${dateStr}`, 15, 28);
      pdf.text(`Generated by: ${data.metadata.generatedBy}`, 15, 34);
    }

    // Add overview section
    if (data.overview) {
      pdf.setFontSize(14);
      pdf.setTextColor(0);
      pdf.text('Overview', 15, 45);

      pdf.setFontSize(10);
      let yPos = 52;

      pdf.text(`Total Equipment: ${data.overview.totalEquipment.toLocaleString()}`, 15, yPos);
      yPos += 6;
      pdf.text(`Total PLCs: ${data.overview.totalPLCs.toLocaleString()}`, 15, yPos);
      yPos += 6;
      pdf.text(`Total Sites: ${data.overview.totalSites.toLocaleString()}`, 15, yPos);
      yPos += 6;
      pdf.text(`Total Cells: ${data.overview.totalCells.toLocaleString()}`, 15, yPos);
      yPos += 6;

      const trend = data.overview.weeklyTrend;
      const trendSymbol = trend.direction === 'up' ? '↑' : trend.direction === 'down' ? '↓' : '→';
      pdf.text(`Weekly Trend: ${trendSymbol} ${trend.percentage.toFixed(1)}%`, 15, yPos);
    }

    // Add top models section
    if (data.topModels && data.topModels.length > 0) {
      pdf.addPage();
      pdf.setFontSize(14);
      pdf.text('Top Equipment Models', 15, 20);

      pdf.setFontSize(10);
      let yPos = 30;

      data.topModels.forEach((model, index) => {
        if (yPos > 180) {
          pdf.addPage();
          yPos = 20;
        }

        pdf.text(
          `${index + 1}. ${model.make} ${model.model}: ${model.count} (${model.percentage.toFixed(1)}%)`,
          15,
          yPos
        );
        yPos += 7;
      });
    }

    // Add distribution summary
    if (data.distribution) {
      pdf.addPage();
      pdf.setFontSize(14);
      pdf.text('Distribution Analysis', 15, 20);

      pdf.setFontSize(10);
      let yPos = 30;

      // Site distribution
      if (data.distribution?.site) {
        pdf.setFontSize(12);
        pdf.text('By Site:', 15, yPos);
        yPos += 7;
        pdf.setFontSize(10);

        data.distribution.site.labels.forEach((label, index) => {
          if (yPos > 180) {
            pdf.addPage();
            yPos = 20;
          }

          const value = data.distribution!.site!.values[index];
          const percentage = data.distribution!.site!.percentages[index];
          pdf.text(`• ${label}: ${value} (${percentage.toFixed(1)}%)`, 20, yPos);
          yPos += 6;
        });
        yPos += 4;
      }

      // Make distribution
      if (data.distribution?.make && yPos < 150) {
        pdf.setFontSize(12);
        pdf.text('By Manufacturer:', 15, yPos);
        yPos += 7;
        pdf.setFontSize(10);

        data.distribution.make.labels.slice(0, 10).forEach((label, index) => {
          if (yPos > 180) {
            pdf.addPage();
            yPos = 20;
          }

          const value = data.distribution!.make!.values[index];
          const percentage = data.distribution!.make!.percentages[index];
          pdf.text(`• ${label}: ${value} (${percentage.toFixed(1)}%)`, 20, yPos);
          yPos += 6;
        });
      }
    }

    // Add recent activity
    if (data.activity && data.activity.length > 0) {
      pdf.addPage();
      pdf.setFontSize(14);
      pdf.text('Recent Activity', 15, 20);

      pdf.setFontSize(9);
      let yPos = 30;

      data.activity.slice(0, 20).forEach(activity => {
        if (yPos > 180) {
          pdf.addPage();
          yPos = 20;
        }

        const timestamp = new Date(activity.timestamp).toLocaleString();
        const actionText = `${activity.userName} ${activity.action}d ${activity.entityType}: ${activity.entityName}`;

        pdf.text(`• ${actionText}`, 15, yPos);
        pdf.setTextColor(100);
        pdf.text(`  ${timestamp}`, 15, yPos + 4);
        pdf.setTextColor(0);
        yPos += 10;
      });
    }

    // Capture dashboard screenshot for visual reference
    try {
      // Hide unnecessary elements for screenshot
      const buttons = element.querySelectorAll('button, .MuiIconButton-root');
      buttons.forEach(btn => {
        (btn as HTMLElement).style.display = 'none';
      });

      const canvas = await html2canvas(element, {
        scale: 2,
        logging: false,
        useCORS: true,
        allowTaint: true,
      });

      // Restore hidden elements
      buttons.forEach(btn => {
        (btn as HTMLElement).style.display = '';
      });

      // Add screenshot as the last page
      pdf.addPage();
      pdf.setFontSize(14);
      pdf.text('Dashboard Screenshot', 15, 20);

      const imgData = canvas.toDataURL('image/png');
      const imgWidth = 267; // A4 width in landscape minus margins
      const imgHeight = (canvas.height * imgWidth) / canvas.width;

      pdf.addImage(imgData, 'PNG', 15, 30, imgWidth, Math.min(imgHeight, 150));
    } catch (error) {
      // Failed to capture dashboard screenshot - continue without it
    }

    // Save the PDF
    const timestamp = new Date().toISOString().slice(0, 19).replace(/:/g, '-');
    pdf.save(`equipment-analytics-${timestamp}.pdf`);
  } catch (error) {
    const errorMessage = error instanceof Error ? error.message : 'Unknown error';
    throw new Error(`Failed to generate PDF report: ${errorMessage}`);
  }
}

export async function captureElementAsImage(element: HTMLElement): Promise<string> {
  const canvas = await html2canvas(element, {
    scale: 2,
    logging: false,
    useCORS: true,
    allowTaint: true,
  });

  return canvas.toDataURL('image/png');
}
