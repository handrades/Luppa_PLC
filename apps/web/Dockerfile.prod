# Multi-stage production Dockerfile for Web
# Stage 1: Build dependencies and compile React app
FROM node:20-alpine AS builder

# Set working directory to workspace root
WORKDIR /workspace

# Install pnpm globally
RUN npm install -g pnpm@9

# Copy workspace configuration
COPY package.json pnpm-lock.yaml pnpm-workspace.yaml ./

# Copy package.json files for all workspace packages
COPY apps/api/package.json ./apps/api/
COPY apps/web/package.json ./apps/web/
# Note: Add packages/*/package.json when they exist

# Install all dependencies
RUN pnpm install --frozen-lockfile

# Copy source code for Web
COPY apps/web ./apps/web

# Set working directory to Web for build
WORKDIR /workspace/apps/web

# Build the React application for production
RUN pnpm build

# Stage 2: Production runtime with Nginx
FROM nginx:alpine AS production

# Create non-root user for security
RUN addgroup -g 1001 -S nodejs && \
    adduser -S nodejs -u 1001

# Copy built React app from builder stage
COPY --from=builder /workspace/apps/web/dist /usr/share/nginx/html

# Copy custom nginx configuration for SPA routing
COPY --from=builder /workspace/apps/web/nginx.conf /etc/nginx/conf.d/default.conf 2>/dev/null || \
    echo 'server {
    listen 80;
    server_name localhost;
    
    location / {
        root /usr/share/nginx/html;
        index index.html index.htm;
        try_files $uri $uri/ /index.html;
    }
    
    # Cache static assets
    location ~* \.(js|css|png|jpg|jpeg|gif|ico|svg)$ {
        expires 1y;
        add_header Cache-Control "public, immutable";
    }
    
    # Security headers
    add_header X-Frame-Options DENY;
    add_header X-Content-Type-Options nosniff;
    add_header X-XSS-Protection "1; mode=block";
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
}' > /etc/nginx/conf.d/default.conf

# Set proper permissions
RUN chown -R nodejs:nodejs /usr/share/nginx/html && \
    chown -R nodejs:nodejs /var/cache/nginx && \
    chown -R nodejs:nodejs /var/log/nginx && \
    chown -R nodejs:nodejs /etc/nginx/conf.d && \
    touch /var/run/nginx.pid && \
    chown -R nodejs:nodejs /var/run/nginx.pid

# Expose port
EXPOSE 80

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD curl -f http://localhost:80/ || exit 1

# Install curl for health checks
RUN apk add --no-cache curl

# Switch to non-root user
USER nodejs

# Start Nginx
CMD ["nginx", "-g", "daemon off;"]