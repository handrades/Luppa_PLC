{
  "$schema": "https://json.schemastore.org/claude-code-settings.json",
  "permissions": {
    "allow": [
      "Bash(gh:*)",
      "Bash(git:*)",
      "Bash(mkdir:*)",
      "Bash(markdownlint:*)",
      "Bash(npm:*)",
      "Bash(find:*)",
      "Bash(pwsh:*)",
      "Bash(Invoke-psake:*)",
      "Bash(grep:*)",
      "Bash(sed:*)",
      "Bash(awk:*)",
      "Bash(md-tree:*)",
      "Bash(node:*)",
      "Bash(ls:*)",
      "Bash(pnpm:*)",
      "Bash(mv:*)",
      "Bash(touch:*)",
      "Bash(yamllint:*)",
      "Bash(curl:*)",
      "Bash(echo:*)",
      "Bash(npx:*)",
      "Bash(cat:*)",
      "mcp__context7__resolve-library-id",
      "mcp__context7__get-library-docs",
      "Bash(xxd:*)",
      "Bash(timeout:*)",
      "mcp__ide__getDiagnostics",
      "Bash(ss:*)",
      "Bash(npm:*)",
      "Bash(docker:*)",
      "mcp__playwright__browser_install",
      "mcp__playwright__browser_navigate",
      "mcp__playwright__browser_take_screenshot",
      "mcp__playwright__browser_console_messages",
      "mcp__playwright__browser_network_requests",
      "Bash(chmod:*)",
      "Bash(tail:*)",
      "Bash(cp:*)",
      "Bash(python3:*)",
      "Bash(NODE_ENV=test npx jest src/App.test.tsx --verbose)",
      "Bash(test:*)",
      "mcp__playwright__browser_close",
      "mcp__playwright__browser_type",
      "mcp__playwright__browser_click",
      "Bash(ln:*)",
      "mcp__playwright__browser_wait_for",
      "WebFetch(domain:github.com)",
      "Bash(prettier:*)",
      "Bash(NODE_ENV=development DB_HOST=localhost DB_PORT=5433 DB_NAME=luppa_dev DB_USER=postgres DB_PASSWORD=dev_password REDIS_HOST=localhost REDIS_PORT=6380 REDIS_PASSWORD=dev_redis_password JWT_SECRET=dev_jwt_secret_change_in_production PORT=3010 HOST=0.0.0.0 npx ts-node src/server.ts)",
      "Bash(NODE_ENV=test npx jest src/__tests__/auth/auth.routes.test.ts --verbose)",
      "Bash(NODE_ENV=test npx jest apps/api/__tests__/health.test.ts --verbose)",
      "Bash(NODE_ENV=test npx jest apps/api/__tests__/app.integration.test.ts --verbose)",
      "Bash(NODE_ENV=test npx jest __tests__/workspace-validation.js --verbose)",
      "WebFetch(domain:express-rate-limit.github.io)",
      "Bash(NODE_ENV=test npx jest src/__tests__/auth/auth.middleware.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest __tests__/app.integration.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/__tests__/app.integration.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test pnpm --filter ./apps/api test)",
      "Bash(NODE_ENV=test npx jest apps/api/__tests__/health.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/auth/AuthService.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/auth/ --verbose --no-coverage)",
      "Bash(NODE_ENV=test npm test)",
      "Bash(NODE_ENV=test npm test --passWithNoTests --silent)",
      "Bash(NODE_ENV=test npx jest __tests__/health.test.ts --verbose --no-coverage)",
      "Bash(for:*)",
      "Bash(do:*)",
      "Bash(done)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/health/ --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/health/health.config.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/health/health.basic.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/__tests__/middleware.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test pnpm test)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/health/health.routes.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test pnpm test --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest --config config/jest.config.js --passWithNoTests)",
      "Bash(NODE_ENV=test pnpm test --passWithNoTests --silent)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/health/health.functions.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npm test -- --testPathPattern=health --passWithNoTests)",
      "Bash(NODE_ENV=test npm test -- --testPathPatterns=health --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/database/migrations.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/ --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/audit.service.test.ts --verbose --no-coverage --testTimeout=30000)",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.triggers.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.service.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.routes.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.routes.test.ts --verbose --no-coverage --testNamePattern=\"should return specific audit log\")",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.routes.test.ts --verbose --no-coverage --testNamePattern=\"should handle filtering parameters\")",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.routes.test.ts --no-coverage)",
      "Bash(NODE_ENV=test npx jest src/__tests__/audit/audit.routes.test.ts --verbose --no-coverage --testNamePattern=\"should return 404 for non-existent audit log\")",
      "Bash(NODE_ENV=test npm test -- --testPathPattern=audit --passWithNoTests)",
      "Bash(NODE_ENV=test npm test -- --testPathPatterns=audit --passWithNoTests)",
      "Bash(NODE_ENV=test npm test -- --testPathPatterns=audit.routes --passWithNoTests)",
      "Bash(NODE_ENV=test npm test -- --testPathPatterns=audit.middleware --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/audit.middleware.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test pnpm test --no-coverage --verbose)",
      "Bash(NODE_ENV=test pnpm test --no-coverage)",
      "Bash(export NODE_ENV=test)",
      "Bash(NODE_ENV=test jest --config config/jest.config.js --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/audit.service.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npm test -- --testPathIgnorePatterns=\"AuthService.test.ts\" --passWithNoTests)",
      "Bash(NODE_ENV=test pnpm test --no-coverage --passWithNoTests)",
      "Bash(NODE_ENV=test npm test -- --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/audit.routes.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/audit/audit.routes.test.ts --no-coverage --passWithNoTests)",
      "Bash(NODE_ENV=test pnpm --filter ./apps/api test:coverage --passWithNoTests)",
      "Bash(NODE_ENV=test npx jest apps/api/src/__tests__/auth/auth.routes.test.ts --verbose --no-coverage)",
      "Bash(NODE_ENV=test pnpm test --passWithNoTests -- --testPathIgnorePatterns=\"auth.routes.test.ts\")",
      "Bash(NODE_ENV=test npm test -- --testPathIgnorePatterns=\"auth.routes.test.ts\" --passWithNoTests)"
    ],
    "deny": ["Bash(rm:*)"]
  }
}

