---
name: Lint

permissions:
  contents: read
  actions: read
  checks: write

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Run Linting Checks
    runs-on: ubuntu-latest
    env:
      ALLOW_INSTALL_FALLBACK: ${{ !github.ref_protected }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version-file: ".nvmrc"
          cache: "pnpm"

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if ! pnpm install --frozen-lockfile; then
            if [ "$ALLOW_INSTALL_FALLBACK" = "true" ]; then
              echo "Frozen lockfile failed, attempting with --no-frozen-lockfile..."
              pnpm install --no-frozen-lockfile
            else
              echo "ERROR: Frozen lockfile failed and fallback is not allowed on protected branches"
              exit 1
            fi
          fi

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: Run Markdown lint
        run: pnpm lint:markdown

      - name: Run JSON lint
        run: pnpm lint:json

      - name: Run YAML lint
        run: pnpm lint:yaml

      - name: Validate package hygiene
        run: |
          echo "Validating package publish-hygiene fields..."
          failed_packages=()
          
          # Check if packages directory exists and has any package.json files
          if [ ! -d "packages" ]; then
            echo "No packages directory found - skipping package validation"
            exit 0
          fi
          
          package_count=$(find packages -name "package.json" -type f 2>/dev/null | wc -l)
          if [ "$package_count" -eq 0 ]; then
            echo "No packages found in packages/ directory - skipping package validation"
            exit 0
          fi
          
          for package_json in packages/*/package.json; do
            if [ -f "$package_json" ]; then
              package_name=$(jq -r '.name' "$package_json")
              echo "Checking $package_name..."
              
              # Check for private field
              if ! jq -e '.private == true' "$package_json" > /dev/null; then
                echo "  ❌ Missing private: true"
                failed_packages+=("$package_name")
              fi
              
              # Check for files array
              if ! jq -e '.files | type == "array"' "$package_json" > /dev/null; then
                echo "  ❌ Missing files array"
                failed_packages+=("$package_name")
              fi
              
              # Check for exports field
              if ! jq -e '.exports' "$package_json" > /dev/null; then
                echo "  ❌ Missing exports field"
                failed_packages+=("$package_name")
              fi
              
              # Check for sideEffects field
              if ! jq -e 'has("sideEffects")' "$package_json" > /dev/null; then
                echo "  ❌ Missing sideEffects field"
                failed_packages+=("$package_name")
              fi
              
              # Check for trailing newline
              if [ ! -s "$package_json" ] || [ "$(tail -c1 "$package_json" | wc -l)" -eq 0 ]; then
                echo "  ❌ Missing trailing newline"
                failed_packages+=("$package_name")
              fi
              
              if [[ ! " ${failed_packages[@]} " =~ " $package_name " ]]; then
                echo "  ✓ All publish-hygiene checks passed"
              fi
            fi
          done
          
          if [[ ${#failed_packages[@]} -gt 0 ]]; then
            echo ""
            echo "❌ Package validation failed for:"
            printf '%s\n' "${failed_packages[@]}" | sort -u
            exit 1
          else
            echo "✓ All packages pass publish-hygiene validation"
          fi

      - name: Check files end with newline
        run: |
          echo "Checking that all files end with newlines..."
          failed_files=()
          while IFS= read -r -d '' file; do
            if [[ -f "$file" && ! -s "$file" ]]; then
              # Empty files are OK
              continue
            fi
            if [[ -f "$file" && $(tail -c1 "$file" | wc -l) -eq 0 ]]; then
              failed_files+=("$file")
            fi
          done < <(find . -type f \
                      -not -path "./node_modules/*" \
                      -not -path "./.bmad-core/*" \
                      -not -path "./.git/*" \
                      -not -path "*/dist/*" \
                      -not -path "*/build/*" \
                      \( -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \
                         -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \
                         -o -name "*.ps1" -o -name "*.txt" -o -name "*.cjs" \) \
                      -print0)

          if [[ ${#failed_files[@]} -gt 0 ]]; then
            echo "❌ The following files do not end with a newline:"
            printf '%s\n' "${failed_files[@]}"
            echo ""
            echo "To fix this, ensure all files end with a newline character."
            echo "In most editors, this happens automatically when you save."
            exit 1
          else
            echo "✓ All files end with newlines"
          fi

      - name: Summary
        run: |
          echo "All linting checks completed! ✓"
