name: CI Pipeline

permissions:
  contents: read
  actions: read
  checks: write

on:
  push:
    branches: [main, master, develop]
  pull_request:
    branches: [main, master, develop]
  workflow_dispatch:

jobs:
  lint:
    name: Lint Code
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    env:
      ALLOW_INSTALL_FALLBACK: ${{ !github.ref_protected }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ['20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache TypeScript build
        uses: actions/cache@v4
        with:
          path: |
            apps/*/dist
            packages/*/dist
            **/tsconfig.tsbuildinfo
          key: ${{ runner.os }}-typescript-${{ hashFiles('**/tsconfig.json', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-typescript-

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if ! pnpm install --frozen-lockfile; then
            if [ "$ALLOW_INSTALL_FALLBACK" = "true" ]; then
              echo "Frozen lockfile failed, attempting with --no-frozen-lockfile..."
              pnpm install --no-frozen-lockfile
            else
              echo "ERROR: Frozen lockfile failed and fallback is not allowed on protected branches"
              exit 1
            fi
          fi

      - name: Run ESLint
        run: pnpm lint

      - name: Run Prettier check
        run: pnpm format:check

      - name: Run Markdown lint
        run: pnpm lint:markdown

      - name: Run JSON lint
        run: pnpm lint:json

      - name: Run YAML lint
        run: pnpm lint:yaml

      - name: Validate Grafana dashboards JSON
        run: |
          echo "Validating Grafana dashboard JSON files..."

          # Install jq if not available
          if ! command -v jq &> /dev/null; then
            echo "Installing jq..."
            sudo apt-get update && sudo apt-get install -y jq
          fi

          # Check if dashboards directory exists and has JSON files
          if [ ! -d "infrastructure/monitoring/grafana/dashboards" ]; then
            echo "Dashboards directory not found - skipping validation"
            exit 0
          fi

          json_files=$(find infrastructure/monitoring/grafana/dashboards -name "*.json" 2>/dev/null | wc -l)
          if [ "$json_files" -eq 0 ]; then
            echo "No JSON dashboard files found - skipping validation"
            exit 0
          fi

          # Validate JSON files
          find infrastructure/monitoring/grafana/dashboards -name "*.json" -print0 | xargs -0 -r -I {} sh -c 'echo "Validating: {}" && jq -e type "{}" > /dev/null'
          echo "✓ All Grafana dashboard JSON files are valid"

      - name: Check files end with newline
        run: |
          echo "Checking that all files end with newlines..."
          failed_files=()
          while IFS= read -r -d '' file; do
            if [[ -f "$file" && ! -s "$file" ]]; then
              # Empty files are OK
              continue
            fi
            if [[ -f "$file" && $(tail -c1 "$file" | wc -l) -eq 0 ]]; then
              failed_files+=("$file")
            fi
          done < <(find . -type f \
                      -not -path "./node_modules/*" \
                      -not -path "./.bmad-core/*" \
                      -not -path "./.git/*" \
                      -not -path "*/dist/*" \
                      -not -path "*/build/*" \
                      \( -name "*.md" -o -name "*.json" -o -name "*.yml" -o -name "*.yaml" \
                         -o -name "*.js" -o -name "*.ts" -o -name "*.jsx" -o -name "*.tsx" \
                         -o -name "*.ps1" -o -name "*.txt" -o -name "*.cjs" \) \
                      -print0)

          if [[ ${#failed_files[@]} -gt 0 ]]; then
            echo "❌ The following files do not end with a newline:"
            printf '%s\n' "${failed_files[@]}"
            echo ""
            echo "To fix this, ensure all files end with a newline character."
            echo "In most editors, this happens automatically when you save."
            exit 1
          else
            echo "✓ All files end with newlines"
          fi

      - name: Run security checks
        run: |
          echo "Running security checks..."
          echo "Checking for security vulnerabilities in dependencies..."
          if command -v pnpm &> /dev/null; then
            pnpm audit --prod || echo "⚠️ Security vulnerabilities found in dependencies"
          elif command -v npm &> /dev/null; then
            npm audit --audit-level=moderate --production || echo "⚠️ Security vulnerabilities found in dependencies"
          else
            echo "No package manager found for security audit"
          fi

          echo "Scanning for security anti-patterns..."
          # Basic security scan for common patterns using portable grep
          if find . \( -path "./node_modules" -o -path "./.bmad-core" -o -path "*/dist" -o -path "*/build" \) -prune -o \( -name "*.js" -o -name "*.ts" -o -name "*.json" \) -print0 | xargs -0 -r grep -E -l "password[[:space:]]*[:=][[:space:]]*[\"'].*[\"']" 2>/dev/null; then
            echo "⚠️ Potential hardcoded passwords found - please review"
          fi
          echo "✓ Security checks completed"

      - name: Check API health and configuration
        run: |
          echo "Checking API health and configuration..."
          echo "Verifying API builds correctly..."

          # Build API to check for TypeScript errors
          pnpm --filter ./apps/api run build
          echo "✓ API builds successfully"

          # Type check API
          pnpm --filter ./apps/api run type-check
          echo "✓ TypeScript configuration is valid"

          # Check required npm scripts exist using jq
          cd apps/api
          if [[ -f package.json ]]; then
            echo "Checking required scripts in API package.json..."
            for script in "build" "type-check" "test" "dev"; do
              if jq -e ".scripts.\"$script\"" package.json > /dev/null; then
                echo "✓ Script exists: $script"
              else
                echo "⚠️ Missing required script: $script"
              fi
            done
          else
            echo "⚠️ API package.json not found"
          fi
          echo "✓ API health checks completed"

  type-check:
    name: Type Check
    runs-on: ${{ matrix.os }}
    timeout-minutes: 10
    env:
      ALLOW_INSTALL_FALLBACK: ${{ !github.ref_protected }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ['20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if ! pnpm install --frozen-lockfile; then
            if [ "$ALLOW_INSTALL_FALLBACK" = "true" ]; then
              echo "Frozen lockfile failed, attempting with --no-frozen-lockfile..."
              pnpm install --no-frozen-lockfile
            else
              echo "ERROR: Frozen lockfile failed and fallback is not allowed on protected branches"
              exit 1
            fi
          fi

      - name: Build shared types
        run: |
          if [ -d "packages/shared-types" ] && [ -f "packages/shared-types/package.json" ]; then
            echo "Building shared types package..."
            pnpm --filter ./packages/shared-types run build
          else
            echo "No shared-types package found - skipping"
          fi

      - name: Type check API
        run: pnpm --filter ./apps/api run type-check

      - name: Type check Web
        run: |
          if [ -d "apps/web" ] && [ -f "apps/web/package.json" ]; then
            echo "Type checking web application..."
            pnpm --filter ./apps/web run type-check
          else
            echo "No web package found - skipping type check"
          fi

  test:
    name: Run Tests
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    env:
      ALLOW_INSTALL_FALLBACK: ${{ !github.ref_protected }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ['20.x']

    services:
      postgres:
        image: postgres:16
        env:
          POSTGRES_PASSWORD: testpass
          POSTGRES_USER: testuser
          POSTGRES_DB: luppa_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

      redis:
        image: redis:7.2
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Cache Jest
        uses: actions/cache@v4
        with:
          path: |
            **/node_modules/.cache/jest
            **/.jest-cache
          key: ${{ runner.os }}-jest-${{ hashFiles('**/jest.config.*', '**/package.json') }}
          restore-keys: |
            ${{ runner.os }}-jest-

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if ! pnpm install --frozen-lockfile; then
            if [ "$ALLOW_INSTALL_FALLBACK" = "true" ]; then
              echo "Frozen lockfile failed, attempting with --no-frozen-lockfile..."
              pnpm install --no-frozen-lockfile
            else
              echo "ERROR: Frozen lockfile failed and fallback is not allowed on protected branches"
              exit 1
            fi
          fi

      - name: Create test environment file
        run: |
          echo "Creating test environment configuration..."
          cat > apps/api/.env.test << EOF
          NODE_ENV=test
          PORT=3010
          DB_HOST=localhost
          DB_PORT=5432
          DB_USERNAME=testuser
          DB_PASSWORD=testpass
          DB_DATABASE=luppa_test
          REDIS_HOST=localhost
          REDIS_PORT=6379
          JWT_SECRET=test-secret-key-for-ci
          BCRYPT_ROUNDS=4
          LOG_LEVEL=error
          CORS_ORIGIN=http://localhost:3000
          EOF
          echo "✓ Test environment file created"

      - name: Run API tests with coverage
        run: |
          echo "Running API tests with coverage..."
          cd apps/api
          pnpm test:coverage --passWithNoTests
        env:
          NODE_ENV: test
          DB_HOST: localhost
          DB_PORT: 5432
          DB_USERNAME: testuser
          DB_PASSWORD: testpass
          DB_DATABASE: luppa_test

      - name: Run Web tests with coverage
        run: |
          if [ -d "apps/web" ] && [ -f "apps/web/package.json" ]; then
            echo "Running web tests with coverage..."
            cd apps/web
            pnpm test:coverage --passWithNoTests
          else
            echo "No web package found - skipping web tests"
          fi

      - name: Run workspace tests
        run: pnpm test

      - name: Upload coverage reports
        uses: codecov/codecov-action@v5
        with:
          fail_ci_if_error: false
          verbose: true

  build:
    name: Build Applications
    runs-on: ${{ matrix.os }}
    timeout-minutes: 15
    needs: [lint, type-check]
    env:
      ALLOW_INSTALL_FALLBACK: ${{ !github.ref_protected }}
    strategy:
      matrix:
        os: [ubuntu-latest]
        node-version: ['20.x']

    steps:
      - name: Checkout code
        uses: actions/checkout@v5

      - name: Install pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9.15.0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}
          cache: 'pnpm'

      - name: Install dependencies
        run: |
          echo "Installing dependencies..."
          if ! pnpm install --frozen-lockfile; then
            if [ "$ALLOW_INSTALL_FALLBACK" = "true" ]; then
              echo "Frozen lockfile failed, attempting with --no-frozen-lockfile..."
              pnpm install --no-frozen-lockfile
            else
              echo "ERROR: Frozen lockfile failed and fallback is not allowed on protected branches"
              exit 1
            fi
          fi

      - name: Build shared types
        run: |
          if [ -d "packages/shared-types" ] && [ -f "packages/shared-types/package.json" ]; then
            echo "Building shared types package..."
            pnpm --filter ./packages/shared-types run build
          else
            echo "No shared-types package found - skipping"
          fi

      - name: Build API
        run: pnpm --filter ./apps/api run build

      - name: Build Web
        run: |
          if [ -d "apps/web" ] && [ -f "apps/web/package.json" ]; then
            echo "Building web application..."
            pnpm --filter ./apps/web run build
          else
            echo "No web package found - skipping web build"
          fi

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-artifacts
          path: |
            apps/api/dist/
            apps/web/dist/
          retention-days: 7
