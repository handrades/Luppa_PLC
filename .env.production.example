# Luppa Inventory System - Production Environment Configuration
# Copy this file to .env.production and adjust values for your production environment
# CRITICAL: All secrets must be set to secure values before deployment

# ================================
# GENERAL APPLICATION SETTINGS
# ================================

# Application environment
NODE_ENV=production

# Logging configuration
LOG_LEVEL=info

# ================================
# DOCKER REGISTRY CONFIGURATION
# ================================

# Docker image registry (leave empty for local builds)
API_VERSION=latest
DOCKER_REGISTRY=
WEB_VERSION=latest

# ================================
# DATABASE CONFIGURATION (PostgreSQL)
# ================================

# PostgreSQL connection settings
POSTGRES_DB=luppa_prod
POSTGRES_HOST=postgres
POSTGRES_PORT=5432
POSTGRES_USER=postgres

# PostgreSQL authentication method (production should use scram-sha-256)
POSTGRES_HOST_AUTH_METHOD=scram-sha-256

# Production SSL settings
POSTGRES_SSL=true

# Database connection pool settings (production optimized)
DB_POOL_IDLE_TIMEOUT=30000
DB_POOL_MAX=50
DB_POOL_MIN=10
DB_QUERY_TIMEOUT=30000

# Application Database Configuration (used by TypeORM)
DB_CONNECTION_TIMEOUT=30000
DB_HOST=pgbouncer
DB_IDLE_TIMEOUT=600000
DB_NAME=luppa_prod
DB_PORT=5432
DB_SSL_MODE=require
DB_USER=postgres

# ================================
# REDIS CONFIGURATION
# ================================

# Redis connection settings
REDIS_HOST=redis
REDIS_PORT=6379

# Redis memory and performance settings (production optimized)
REDIS_EVICTION_POLICY=allkeys-lru
REDIS_MAX_MEMORY=1gb

# Redis session configuration
REDIS_SESSION_PREFIX=luppa:session:
REDIS_SESSION_TTL=3600

# ================================
# API SERVICE CONFIGURATION
# ================================

# API server settings
API_HOST=0.0.0.0
API_PORT=3000

# CORS configuration (MUST be set to production domain)
CORS_CREDENTIALS=true
CORS_ORIGIN=https://your-production-domain.com

# JWT authentication settings
JWT_EXPIRES_IN=1h
JWT_REFRESH_EXPIRES_IN=7d

# Session configuration
SESSION_MAX_AGE=3600000

# Rate limiting (production settings)
RATE_LIMIT_MAX_REQUESTS=100
RATE_LIMIT_WINDOW_MS=900000

# File upload settings
UPLOAD_ALLOWED_TYPES=image/jpeg,image/png,application/pdf,text/csv
UPLOAD_MAX_FILES=5
UPLOAD_MAX_FILE_SIZE=10485760

# ================================
# WEB SERVICE CONFIGURATION
# ================================

# Vite configuration (production)
VITE_API_URL=https://your-production-domain.com/api/v1
VITE_APP_TITLE="Luppa Inventory"
VITE_APP_VERSION=latest
VITE_LOG_LEVEL=warn

# Feature flags for production (disabled for security)
VITE_ENABLE_AUTO_REFRESH=false
VITE_ENABLE_DEBUG_TOOLS=false
VITE_ENABLE_MOCK_DATA=false

# ================================
# NGINX REVERSE PROXY
# ================================

# Nginx ports
NGINX_HTTPS_PORT=443
NGINX_HTTP_PORT=80

# SSL/TLS Configuration
SSL_CERT_PATH=/etc/ssl/certs/server.crt
SSL_KEY_PATH=/etc/ssl/private/server.key

# ================================
# MONITORING CONFIGURATION
# ================================

# Grafana configuration
GRAFANA_ADMIN_PASSWORD=secure_admin_password_change_me
GRAFANA_DOMAIN=your-production-domain.com
GRAFANA_INSTALL_PLUGINS=
GRAFANA_SECRET_KEY=secure_grafana_secret_change_me

# Prometheus configuration
PROMETHEUS_RETENTION_SIZE=10GB
PROMETHEUS_RETENTION_TIME=30d

# Metrics collection
ENABLE_METRICS=true
METRICS_PATH=/metrics
METRICS_PORT=9090

# ================================
# DOCKER SWARM CONFIGURATION
# ================================

# Docker Compose project name
COMPOSE_PROJECT_NAME=luppa-prod

# Service replicas
API_REPLICAS=2
NGINX_REPLICAS=1
WEB_REPLICAS=2

# Container resource limits (production)
API_CPU_LIMIT=1.0
API_CPU_RESERVATION=0.5
API_MEMORY_LIMIT=1g
API_MEMORY_RESERVATION=512m

GRAFANA_CPU_LIMIT=0.5
GRAFANA_CPU_RESERVATION=0.25
GRAFANA_MEMORY_LIMIT=1g
GRAFANA_MEMORY_RESERVATION=512m

NGINX_CPU_LIMIT=0.5
NGINX_CPU_RESERVATION=0.25
NGINX_MEMORY_LIMIT=256m
NGINX_MEMORY_RESERVATION=128m

POSTGRES_CPU_LIMIT=2.0
POSTGRES_CPU_RESERVATION=0.5
POSTGRES_MEMORY_LIMIT=2g
POSTGRES_MEMORY_RESERVATION=1g

PROMETHEUS_CPU_LIMIT=1.0
PROMETHEUS_CPU_RESERVATION=0.5
PROMETHEUS_MEMORY_LIMIT=2g
PROMETHEUS_MEMORY_RESERVATION=1g

REDIS_CPU_LIMIT=1.0
REDIS_CPU_RESERVATION=0.25
REDIS_MEMORY_LIMIT=2g
REDIS_MEMORY_RESERVATION=512m

WEB_CPU_LIMIT=0.5
WEB_CPU_RESERVATION=0.25
WEB_MEMORY_LIMIT=512m
WEB_MEMORY_RESERVATION=256m

# ================================
# SECURITY SETTINGS
# ================================

# Password requirements (production hardened)
PASSWORD_MIN_LENGTH=12
PASSWORD_REQUIRE_LOWERCASE=true
PASSWORD_REQUIRE_NUMBERS=true
PASSWORD_REQUIRE_SYMBOLS=true
PASSWORD_REQUIRE_UPPERCASE=true

# Account lockout settings (production hardened)
LOCKOUT_DURATION=1800000
MAX_LOGIN_ATTEMPTS=3

# Security headers
SECURITY_ENABLE_CORS=true
SECURITY_ENABLE_HELMET=true
SECURITY_ENABLE_RATE_LIMITING=true

# ================================
# PLC INVENTORY SPECIFIC SETTINGS
# ================================

# PLC communication settings
PLC_DEFAULT_RETRIES=3
PLC_DEFAULT_TIMEOUT=5000
PLC_SCAN_INTERVAL=30000

# Equipment discovery (disable in production for security)
DISCOVERY_NETWORK_RANGE=10.0.0.0/16
DISCOVERY_PORT_RANGE=502,2404,44818
ENABLE_AUTO_DISCOVERY=false

# Data retention settings (compliance)
AUDIT_LOG_RETENTION_DAYS="2555  # 7 years for ISO compliance"
COMMUNICATION_LOG_RETENTION_DAYS=365
ERROR_LOG_RETENTION_DAYS=365

# Backup settings
BACKUP_ENABLED=true
BACKUP_INTERVAL=daily
BACKUP_RETENTION_COUNT=30

# ================================
# MONITORING AND OBSERVABILITY
# ================================

# Health check settings
HEALTH_CHECK_INTERVAL=30
HEALTH_CHECK_RETRIES=3
HEALTH_CHECK_TIMEOUT=10

# Application performance monitoring
APM_ENABLED=true
APM_ENVIRONMENT=production
APM_SERVICE_NAME=luppa-plc-inventory

# ================================
# PRODUCTION SECURITY REQUIREMENTS
# ================================

# CRITICAL: These MUST be changed before production deployment!
# Use Docker secrets in production instead of environment variables

# Example commands to create Docker secrets:
# echo "your_secure_postgres_password" | docker secret create postgres-password -
# echo "your_secure_redis_password" | docker secret create redis-password -
# echo "your_production_jwt_secret_here" | docker secret create jwt-secret -
# docker secret create ssl-cert server.crt
# docker secret create ssl-key server.key

# These variables are kept for configuration reference but should NOT be used in production
# Use Docker secrets instead:
# POSTGRES_PASSWORD=REPLACE_WITH_DOCKER_SECRET
# REDIS_PASSWORD=REPLACE_WITH_DOCKER_SECRET
# JWT_SECRET=REPLACE_WITH_DOCKER_SECRET
# SESSION_SECRET=REPLACE_WITH_DOCKER_SECRET

# ================================
# SSL/TLS CERTIFICATE CONFIGURATION
# ================================

# SSL certificate information for self-signed certificates (development/internal use only)
SSL_COMMON_NAME=your-production-domain.com
SSL_COUNTRY=US
SSL_LOCALITY=City
SSL_ORGANIZATION=Organization
SSL_ORG_UNIT="IT Department"
SSL_STATE=State

# ================================
# AIR-GAPPED ENVIRONMENT SETTINGS
# ================================

# Disable external connections in air-gapped environments
GRAFANA_CHECK_FOR_UPDATES=false
GRAFANA_REPORTING_ENABLED=false
PROMETHEUS_ENABLE_FEATURE_REMOTE_WRITE_RECEIVER=false

# Local NTP server for time synchronization in air-gapped networks
NTP_SERVERS=10.0.0.1,10.0.0.2

# DNS configuration for air-gapped environments
DNS_SERVERS=10.0.0.1,10.0.0.2
